{"version":3,"sources":["SortingVisualizer/SortingMain.js","App.js","index.js"],"names":["SortingMain","useState","array","setArray","algorithm","setAlgorithm","speedSlider","setSpeedSlider","sizeSlider","setSizeSlider","isStarted","setIsStarted","isFinished","setIsFinished","SPEED","useEffect","newArray","i","push","Math","floor","random","bubbleSort","count","isSorted","newArr","animations","length","swap","animationsGo","quickSort","arr","quickSortHelper","startIdx","endIdx","pivotIdx","leftIdx","rightIdx","heapSort","currentIdx","siftDown","buildMaxHeap","heap","childOneIdx","childTwoIdx","idxToSwap","mergeSort","auxiliaryArray","slice","mergeSortHelper","bar","document","getElementsByClassName","color","setTimeout","style","backgroundColor","height","mergeAnimations","mainArray","middleIdx","k","j","doMerge","temp","tempHeight","className","onClick","type","min","max","value","onChange","x","target","map","App","Helmet","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.47f1d556.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport './SortingMain.css';\r\n\r\nfunction SortingMain() {\r\n    const [array, setArray] = useState([]);\r\n    const [algorithm, setAlgorithm] = useState('bubble');\r\n    const [speedSlider, setSpeedSlider] = useState(10);\r\n    const [sizeSlider, setSizeSlider] = useState(100);\r\n    const [isStarted, setIsStarted] = useState(false);\r\n    const [isFinished, setIsFinished] = useState(false);\r\n\r\n    const SPEED = speedSlider / 10;\r\n\r\n    useEffect(() => {\r\n        newArray();\r\n    }, [])\r\n\r\n    const nothing = () => {}\r\n\r\n    const handleSpeedSlider = (x) => {\r\n        setSpeedSlider(x.target.value);\r\n    }\r\n\r\n    const handleSizeSlider = (x) => {\r\n        if(isStarted === true && isFinished === false){\r\n\r\n        }else{\r\n            setSizeSlider(x.target.value);\r\n            newArray();\r\n        }\r\n    }\r\n\r\n    const sort = () => {\r\n        setIsStarted(true);\r\n        if(algorithm === 'bubble') {\r\n            bubbleSort();\r\n        }else if(algorithm === 'quick') {\r\n            quickSort();\r\n        }else if(algorithm === 'heap') {\r\n            heapSort();\r\n        }else if(algorithm === 'merge') {\r\n            mergeSort();\r\n        }\r\n    }\r\n\r\n    const newArray = () => {\r\n        setIsStarted(false);\r\n        let array = [];\r\n        for(let i = 0; i < sizeSlider; i++){\r\n            array.push(Math.floor(Math.random() * 495) + 5);\r\n        }\r\n        setArray(array);\r\n    }\r\n\r\n    const newArrayFinished = () => {\r\n        if(isFinished === true){\r\n            let array = [];\r\n            for(let i = 0; i < sizeSlider; i++){\r\n                array.push(Math.floor(Math.random() * 495) + 5);\r\n            }\r\n            setArray(array);\r\n            setIsFinished(false);\r\n            setIsStarted(false);\r\n        }\r\n    }\r\n\r\n    const selectBubble = () => {\r\n        setAlgorithm('bubble');\r\n    }\r\n\r\n    const selectQuick = () => {\r\n        setAlgorithm('quick');\r\n    }\r\n\r\n    const selectHeap = () => {\r\n        setAlgorithm('heap');\r\n    }\r\n\r\n    const selectMerge = () => {\r\n        setAlgorithm('merge');\r\n    }\r\n\r\n    const bubbleSort = () => {\r\n        let count = 0;\r\n        let isSorted = false;\r\n        let newArr = [...array];\r\n        let animations = [];\r\n\r\n        while(!isSorted){\r\n            isSorted = true;\r\n            for(let i = 0; i < newArr.length - 1 - count; i++){\r\n                animations.push([i, i + 1]);\r\n                animations.push([i, i + 1]);\r\n                if(newArr[i] > newArr[i + 1]){\r\n                    animations.push([i, i + 1]);\r\n                    swap(i, i + 1, newArr);\r\n                    isSorted = false;\r\n                }else{\r\n                    animations.push([i, i]);\r\n                }\r\n            }\r\n            count++;\r\n        }\r\n        animationsGo(animations);\r\n    }\r\n\r\n    const quickSort = () => {\r\n        let arr = [...array];\r\n        let animations = [];\r\n        quickSortHelper(arr, 0, arr.length - 1, animations);\r\n        animationsGo(animations);\r\n    }\r\n        \r\n    function quickSortHelper(array, startIdx, endIdx, animations) {\r\n        if(startIdx >= endIdx) return;\r\n        let pivotIdx = startIdx;\r\n        let leftIdx = startIdx + 1;\r\n        let rightIdx = endIdx;\r\n\r\n        while (rightIdx >= leftIdx) {\r\n            animations.push([rightIdx, leftIdx]);\r\n            animations.push([rightIdx, leftIdx]);\r\n            if(array[leftIdx] > array[pivotIdx] && array[rightIdx] < array[pivotIdx]) {\r\n                swap(leftIdx, rightIdx, array);\r\n                animations.push([rightIdx, leftIdx]);\r\n            }else{\r\n                animations.push([rightIdx, rightIdx]);\r\n            }\r\n            if(array[leftIdx] <= array[pivotIdx]) leftIdx++;\r\n            if(array[rightIdx] >= array[pivotIdx]) rightIdx--;\r\n        }\r\n        swap(pivotIdx, rightIdx, array);\r\n        animations.push([rightIdx, pivotIdx]);\r\n        animations.push([rightIdx, pivotIdx]);\r\n        animations.push([rightIdx, pivotIdx]);\r\n        const leftSubarrayIsSmaller = rightIdx - 1 - startIdx < endIdx - rightIdx - 1;\r\n        if (leftSubarrayIsSmaller) {\r\n            quickSortHelper(array, startIdx, rightIdx - 1, animations);\r\n            quickSortHelper(array, rightIdx + 1, endIdx, animations);\r\n        } else {\r\n            quickSortHelper(array, rightIdx + 1, endIdx, animations);\r\n            quickSortHelper(array, startIdx, rightIdx - 1, animations);\r\n        }\r\n    }\r\n    \r\n    const heapSort = () => {\r\n        let newArr = [...array];\r\n        let animations = [];\r\n        buildMaxHeap(newArr, animations);\r\n        for(let endIdx = newArr.length - 1; endIdx > 0; endIdx--){\r\n            animations.push([0, endIdx]);\r\n            animations.push([0, endIdx]);\r\n            animations.push([0, endIdx]);\r\n            swap(0, endIdx, newArr);\r\n            siftDown(0, endIdx - 1, newArr, animations);\r\n        }\r\n        animationsGo(animations);\r\n    }\r\n\r\n    function buildMaxHeap(array, animations) {\r\n        const firstParentIdx = Math.floor((array.length - 2) / 2);\r\n        for(let currentIdx = firstParentIdx; currentIdx >= 0; currentIdx--) {\r\n          siftDown(currentIdx, array.length - 1, array, animations);\r\n        }\r\n    }\r\n      \r\n    function siftDown(currentIdx, endIdx, heap, animations) {\r\n        let childOneIdx = currentIdx * 2 + 1;\r\n        while(childOneIdx <= endIdx) {\r\n            const childTwoIdx = currentIdx * 2 + 2 <= endIdx ? currentIdx * 2 + 2 : -1;\r\n            let idxToSwap;\r\n            if (childTwoIdx !== -1 && heap[childTwoIdx] > heap[childOneIdx]) {\r\n                idxToSwap = childTwoIdx;\r\n            } else {\r\n                idxToSwap = childOneIdx;\r\n            }\r\n            animations.push([idxToSwap, currentIdx]);\r\n            animations.push([idxToSwap, currentIdx]);\r\n            if (heap[idxToSwap] > heap[currentIdx]) {\r\n                animations.push([idxToSwap, currentIdx]);\r\n                swap(currentIdx, idxToSwap, heap);\r\n                currentIdx = idxToSwap;\r\n                childOneIdx = currentIdx * 2 + 1;\r\n            } else {\r\n                animations.push([currentIdx, currentIdx]);\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\nconst mergeSort = () => {\r\n    let animations = [];\r\n    let newArr = [...array];\r\n    const auxiliaryArray = newArr.slice();\r\n\tmergeSortHelper(newArr, 0, newArr.length - 1, auxiliaryArray, animations);\r\n\tmergeAnimations(animations);\r\n\r\n}\r\n\r\nfunction mergeAnimations(animations){\r\n    for(let i = 0; i < animations.length; i++){\r\n        let bar = document.getElementsByClassName('bar');\r\n        const colorChange = i % 3 !== 2;\r\n        if(colorChange){\r\n            const color = i % 3 !== 0 ? 'black' : 'red';\r\n            setTimeout(() => {\r\n                bar[animations[i][0]].style.backgroundColor = color;\r\n                bar[animations[i][1]].style.backgroundColor = color;\r\n            }, i * SPEED * 3);\r\n        }else{\r\n            setTimeout(() => {\r\n                bar[animations[i][0]].style.height = `${animations[i][1]}px`;\r\n            }, i * SPEED * 3);\r\n        }\r\n        if(i === animations.length - 1){\r\n            setTimeout(() => {\r\n                setIsFinished(true);\r\n            }, i * SPEED * 3);\r\n        }\r\n    }\r\n}\r\n\r\nfunction mergeSortHelper(mainArray, startIdx, endIdx, auxiliaryArray, animations) {\r\n\tif(startIdx === endIdx) return;\r\n\tconst middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n\tmergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n\tmergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\r\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n}\r\n\r\nfunction doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations) {\r\n\tlet k = startIdx;\r\n\tlet i = startIdx;\r\n\tlet j = middleIdx + 1;\r\n\twhile(i <= middleIdx && j <= endIdx) {\r\n        animations.push([i, j]);\r\n        animations.push([i, j]);\r\n\t\tif(auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n            animations.push([k, auxiliaryArray[i]]);\r\n\t\t\tmainArray[k++] = auxiliaryArray[i++];\r\n\t\t} else {\r\n            animations.push([k, auxiliaryArray[j]]);\r\n\t\t\tmainArray[k++] = auxiliaryArray[j++];\r\n\t\t}\r\n\t}\r\n\twhile(i <= middleIdx) {\r\n        animations.push([i, i]);\r\n        animations.push([i, i]);\r\n        animations.push([k, auxiliaryArray[i]]);\r\n\t\tmainArray[k++] = auxiliaryArray[i++];\r\n\t}\r\n\twhile(j <= endIdx) {\r\n        animations.push([j, j]);\r\n        animations.push([j, j]);\r\n        animations.push([k, auxiliaryArray[j]]);\r\n\t\tmainArray[k++] = auxiliaryArray[j++];\r\n\t}\r\n}\r\n\r\n    function swap(i, j, arr){\r\n        let temp = arr[i];\r\n        arr[i] = arr[j];\r\n        arr[j] = temp;\r\n    }\r\n\r\n    function animationsGo(animations) {\r\n        for(let i = 0; i < animations.length; i++){\r\n            let tempHeight = 0;\r\n            let bar = document.getElementsByClassName('bar');\r\n            const colorChange = i % 3 !== 2;\r\n            if(colorChange){\r\n                const color = i % 3 !== 0 ? 'black' : 'red';\r\n                setTimeout(() => {\r\n                    bar[animations[i][0]].style.backgroundColor = color;\r\n                    bar[animations[i][1]].style.backgroundColor = color;\r\n                }, i * SPEED);\r\n            }else{\r\n                setTimeout(() => {\r\n                    tempHeight = bar[animations[i][0]].style.height;\r\n                    bar[animations[i][0]].style.height = bar[animations[i][1]].style.height;\r\n                    bar[animations[i][1]].style.height = tempHeight;\r\n                }, i * SPEED);\r\n            }\r\n            if(i === animations.length - 1){\r\n                setTimeout(() => {\r\n                    setIsFinished(true);\r\n                }, i * SPEED);\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='sorting-main'>\r\n            <div className='nav'>\r\n                <div className='button-container'>\r\n                    <div className='nav-1'>\r\n                        <button className='nav-button' onClick={isStarted === false ? sort : nothing} >Sort</button>\r\n                        <button className='nav-button' onClick={isStarted === false ? newArray : newArrayFinished} >Create New Array</button>\r\n                    </div>\r\n                    <div className='nav-2'>\r\n                        <button className={algorithm === 'bubble' ? 'selected-button' : 'nav-button'} onClick={selectBubble} >Bubble Sort</button>\r\n                        <button className={algorithm === 'quick' ? 'selected-button' : 'nav-button'} onClick={selectQuick} >Quick Sort</button>\r\n                        <button className={algorithm === 'heap' ? 'selected-button' : 'nav-button'} onClick={selectHeap} >Heap Sort</button>\r\n                        <button className={algorithm === 'merge' ? 'selected-button' : 'nav-button'} onClick={selectMerge} >Merge Sort</button>\r\n                    </div>\r\n                    <div className='nav-3'>\r\n                        <div className='slider-name'>Size</div>\r\n                        <input type=\"range\" min={10} max={190} value={sizeSlider} className=\"slider\" onChange={handleSizeSlider} />\r\n                        <div className='slider-name'>Speed</div>\r\n                        <input type=\"range\" min={2} max={20} value={speedSlider} className=\"slider\" onChange={handleSpeedSlider} />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className='bar-container'>\r\n                {array.map((x) => {\r\n                    return <div className='bar' style={{height: `${x}px`}}></div>\r\n                })}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SortingMain;\r\n","import './App.css';\nimport SortingMain from './SortingVisualizer/SortingMain';\nimport {Helmet} from 'react-helmet'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Helmet>\n        <title>Sorting Visualizer</title>\n      </Helmet>\n      <SortingMain />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}